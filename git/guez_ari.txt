--- Exercice 1 ---

1. $ git init

2. "Dépôt Git vide initialisé dans /home/arguez/git/.git/"
Le répertoire contient maintenant un dossier '.git'.

3. Le dépôt est vide et n'a aucun commit.

--- Exercice 2 ---

1. La commande 'git status' signale un fichier non suivi main.c .

2. 'git status' annonce les modifications apportées au répertoire courant qui seront validées ainsi que le type de modifications. En l'occurence, un nouveau fichier main.c .

3. Git demande que l'on paramètre un nom et une adresse mail. (par défaut ils sont crées en se basant sur le username de la machine sur laquelle on travaille.).

4. $ git config --global user.name "Ari Guez"
$ git config --global user.email "ariguez2865@gmail.com"

5. 'git status' renvoie 'rien à valider, la copie de travail est propre' : notre commit a été enregistré.

6. Il contient deux fichiers non suivis.

7. $ git add *.txt

8. $ git commit -m "ajout des fichiers texte"

9. Il contient un fichier non suivi 'a.out' .

10. L'exécutable changera avec chaque recompliation du/des fichier.s source, il n'est donc pas intéressant de le sauvegarder. Par ailleurs, si on voulait retrouver une ancienne version de l'exécutable, il suffirait de recomplier un vieux fichier source.

11. $ echo "*.out" > .gitignore

12. $ git add .gitignore
$ git commit -m "added .gitignore"

--- Exercice 3 ---

1. 'git status' signale deux modifications de fichiers non traquées.

2. $ git diff

3. $ git diff --color-words

4. Le dépôt contient un fichier dans la 'zone de validation' (main.c) et un fichier non suivi (foo.txt).

5. $ git commit -m "traduction en français"

6. $ git add foo.txt
Le dépôt contient foo.txt dans la zone de validation.

7. $ git reset foo.txt
Le dépôt signale que foo.txt ne sera pas validé.

8.  $ git add --patch foo.txt
$ s
$ y
$ n

On nous signale que foo.txt est dans la zone de validation, mais également que foo.txt contient des changements non suivis.

9. $ git commit -m "somewhat understood --patch option"

10. $ git commit -a -m "completed feature request #13"

--- Exercice 4 ---

1. La commande git log liste tous les commits effectués dans le répertoire courant, les plus récents en premier. Pour chaque commit, elle affiche plusieurs informations : une suite de caractères qui servent à identifier le commit, l'auteur du commit (ainsi que son adresse mail), la date à laquelle le commit a été effectué (ainsi que le fuseau horaire GMT de l'endroit où le commit a été effectué) puis le commentaire du commit correspondant. La branche du déôt sur laquelle on travaille est aussi renseignée.

2. $ git log --name-status
$ git log --oneline
$ git log --name-status --oneline

3. $ git log -1

4. 
